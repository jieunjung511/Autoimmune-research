from sklearn.model_selection import StratifiedKFold
from sklearn.metrics import roc_curve, auc
from sklearn.ensemble import RandomForestClassifier
import matplotlib.pyplot as plt
from scipy import interp
import numpy as np

dataset = np.loadtxt('C:\\Users\\medinfo_jung\\Desktop\\Medinfo\\2018_summer\\github\\data_for_rf.csv',
                     delimiter = ',', dtype=np.float32)
X = dataset[:, 1:]
y = dataset[:, 0]

cv = StratifiedKFold(n_splits=10)
ml = RandomForestClassifier(criterion='entropy', n_estimators=100, max_depth=10, n_jobs=2, random_state=1)

tprs=[]
aucs=[]
mean_fpr = np.linspace(0,1,100)

i=0
for train, test in cv.split(X, y):
    probas_ = ml.fit(X[train], y[train]).predict_proba(X[test])
    
    fpr, tpr, thresholds = roc_curve(y[test], probas_[:, 1])
    tprs.append(interp(mean_fpr, fpr, tpr))
    tprs[-1][0] = 0.0
    roc_auc = auc(fpr, tpr)
    aucs.append(roc_auc)
    plt.plot(fpr, tpr, lw=1, alpha=0.3, label='ROC flod %d (AUC = %0.2f)' % (i, roc_auc))
    
    i+=1

plt.plot([0, 1], [0, 1], linestyle='--', lw=2, color='r', label='Chance', alpha=.8)

mean_tpr = np.mean(tprs, axis=0)
mean_tpr[-1] = 1.0
mean_auc = auc(mean_fpr, mean_tpr)
std_auc = np.std(aucs)
plt.plot(mean_fpr, mean_tpr, color='b',
         label=r'Mean ROC (AUC = %0.2f $\pm$ %0.2f)' % (mean_auc, std_auc),
         lw=2, alpha=.8)

std_tpr = np.std(tprs, axis=0)
tprs_upper = np.minimum(mean_tpr + std_tpr, 1)
tprs_lower = np.maximum(mean_tpr - std_tpr, 0)
plt.fill_between(mean_fpr, tprs_lower, tprs_upper, color='grey', alpha=.2,
                 label=r'$\pm$ 1 std. dev.')

plt.xlim([-0.05, 1.05])
plt.ylim([-0.05, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC curve')
plt.legend(loc="lower right")
plt.show()

AD_data = np.loadtxt('AD_SNP_features.csv',
                    delimiter = ',', dtype=np.float32)

probas = ml.predict_proba(AD_data)
df = pd.DataFrame(data=probas)
print(df)
df.to_csv("AD_results.csv",index=False)

IBD_data = np.loadtxt('IBD_SNP_features.csv',
                    delimiter = ',', dtype=np.float32)

probas = ml.predict_proba(AD_data)
df = pd.DataFrame(data=probas)
print(df)
df.to_csv("IBD_results.csv",index=False)
